#include <memory>
#include <iostream>
#include <vector>
#include <iomanip>
#include "Solution/Part1/GaussElimination.hpp"
#include "Solution/Part1/GaussSeidel.hpp"
#include "Solution/Part2/cf_regression.hpp"
#include "Solution/Part3/Helpers.hpp"
#include "Solution/Part3/NewtonInterpolator.hpp"
#include "Solution/Part3/CubicSplineInterpolator.hpp"
#include "main.hpp"

int main()
{
    presentPart1();
	present_poly_reg();
    presentPart3();
    return 0;
}

void presentPart1() {
    std::cout << std::fixed;
    std::cout << std::setprecision (4);
    int option = 0, debug = 0;
    Solution::Part1::Solver * S;
    cout << "enter 1 for debug " << endl;
    cin >> debug;

    //cout << GL.valid_solution << endl;

    cout << "enter 1 for GaussElimination or 2 for seidel" << endl;
    cin >> option;
    if ( option == 1 )
    {
        Solution::Part1::GaussElimination g;
        S = &g;
        if ( debug == 1 )
        {
            S->debug_mode = true;
        }
        S->SetSource ();
        S->Apply ();
    }
    else
    {
        Solution::Part1::GaussSeidel g ( 30 );
        S = &g;
        if ( debug == 1 )
        {
            S->debug_mode = true;
        }
        S->SetSource ();
        S->Apply ();
    }
    cout << "\nThe values of the variables are as follows:\n";
    for ( int i = 0; i < S->nd; i++ )
    {
        cout << S->result[ i ] << endl;
    }         // Print the values of x, y,z,....


}

//For polynomial regression.
void present_poly_reg() {
	//Order
	const int m = 2;

    std::vector<float> x = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    std::vector<float> y = {2.7539933, 1.89480996, 5.66772085,
        8.50870948, 10.9265186, 13.53008555, 11.83534674, 
        17.6239973, 21.18380426, 23.93961935};

    std::vector<float> y_2 = {-0.50466197, -6.07975077, 5.92268482, 
        4.9561807, 1.55448633, 14.14332855, 22.37781082, 36.10134947, 
        56.35029787, 89.54115176};

    cf_regression::fit_polyreg(x, y, m);

    
    for (float i = 0.0; i < 10.1; i += 0.1) {
        cf_regression::predict_polyreg(i);
    }
}

//For multi-linear regression.
void present_mlreg() {
	//Order
	const int m = 2;
	
	std::vector<float> prices = {42000, 38500, 49500, 60500, 61000, 66000, 66000, 69000, 83800, 88500, 90000, 30500, 27000, 36000, 37000, 37900, 40500, 40750, 45000, 45000, 48500, 65900, 37900, 38000, 42000, 42300, 43500, 44000, 44500, 44900, 45000, 48000, 49000, 51500, 61000, 61000, 61700, 67000, 82000, 54500, 66500, 70000, 82000, 92000, 38000, 44000, 41000, 43000, 48000, 54800, 55000, 57000, 68000, 95000, 38000, 25000, 25245, 56000, 35500, 30000, 48000, 48000, 52000, 54000, 56000, 60000, 60000, 67000, 47000, 70000, 45000, 51000, 32500, 34000, 35000, 36000, 45000, 47000, 55000, 63900, 50000, 35000, 50000, 43000, 55500, 57000, 60000, 78000, 35000, 44000, 47000, 58000, 163000, 128000, 123500, 39000, 53900, 59900, 35000, 43000, 57000, 79000, 125000, 132000, 58000, 43000, 48000, 58500, 73000, 63500, 43000, 46500, 92000, 75000, 75000, 85000, 93000, 94500, 106500, 116000, 61500, 80000, 37000, 59500, 70000, 95000, 117000, 122500, 123500, 127000, 35000, 44500, 49900, 50500, 65000, 90000, 46000, 35000, 26500, 43000, 56000, 40000, 51000, 51000, 57250, 44000, 61000, 62000, 80000, 50000, 59900, 35500, 37000, 42000, 48000, 60000, 60000, 60000, 62000, 63000, 63900, 130000, 25000, 50000, 52900, 62000, 73500, 38000, 46000, 48000, 52500, 32000, 38000, 46000, 50000, 57500, 70000, 69900, 74500, 42000, 60000, 50000, 58000, 63900, 28000, 54000, 44700, 47000, 50000, 57250, 67000, 52500, 42000, 57500, 33000, 34400, 40000, 40500, 46500, 52000, 53000, 53900, 50000, 55500, 56000, 60000, 60000, 69500, 72000, 92500, 40500, 42000, 47900, 52000, 62000, 41000, 138300, 42000, 47000, 64500, 46000, 58000, 70100, 78500, 87250, 70800, 56000, 48000, 68000, 79000, 80000, 87000, 25000, 32500, 36000, 42500, 43000, 50000, 26000, 30000, 34000, 52000, 70000, 27000, 32500, 37200, 38000, 42000, 44500, 45000, 48500, 52000, 53900, 60000, 61000, 64500, 71000, 75500, 33500, 41000, 41000, 46200, 48500, 48900, 50000, 51000, 52500, 52500, 54000, 59000, 60000, 63000, 64000, 64900, 65000, 66000, 70000, 65500, 57000, 52000, 54000, 74500, 90000, 45000, 45000, 65000, 55000, 62000, 30000, 34000, 38000, 39000, 45000, 47000, 47500, 49000, 50000, 50000, 52900, 53000, 55000, 56000, 58500, 59500, 60000, 64000, 67000, 68100, 70000, 72000, 57500, 69900, 70000, 75000, 76900, 78000, 80000, 82000, 83000, 83000, 83900, 88500, 93000, 98000, 98500, 99000, 101000, 110000, 115442, 120000, 124000, 175000, 50000, 55000, 60000, 61000, 106000, 155000, 141000, 62500, 70000, 73000, 80000, 80000, 88000, 49000, 52000, 59500, 60000, 64000, 64500, 68500, 78500, 86000, 86900, 75000, 78000, 95000, 97000, 107000, 130000, 145000, 175000, 72000, 84900, 99000, 114000, 120000, 145000, 79000, 82000, 85000, 100500, 122000, 126500, 133000, 140000, 190000, 84000, 97000, 103500, 112500, 140000, 74700, 78000, 78900, 83900, 85000, 85000, 86000, 86900, 94500, 96000, 106000, 72000, 74500, 77000, 80750, 82900, 85000, 92500, 76000, 77500, 80000, 80000, 86000, 87000, 87500, 89000, 89900, 90000, 95000, 112000, 31900, 52000, 90000, 1.00E+05, 91700, 174500, 94700, 68000, 80000, 61100, 62900, 65500, 66000, 49500, 50000, 53500, 58550, 64500, 65000, 69000, 73000, 75000, 75000, 132000, 60000, 65000, 69000, 51900, 57000, 65000, 79500, 72500, 104900, 114900, 120000, 58000, 67000, 67000, 69000, 73000, 73500, 74900, 75000, 79500, 120900, 44555, 47000, 47600, 49000, 49000, 49000, 49500, 52000, 54000, 55000, 55000, 56000, 60000, 60500, 50000, 64900, 93000, 85000, 61500, 88500, 88000, 89000, 89500, 95000, 95500, 51500, 62900, 118500, 42900, 44100, 47000, 50000, 50000, 53000, 53000, 54000, 58500, 59000, 60000, 62900, 64000, 65000, 67900, 68500, 70000, 70500, 71500, 71900, 75000, 75000, 87000, 64000, 70000, 47500, 62600, 66000, 58900, 53000, 95000, 96500, 101000, 102000, 103000, 105000, 108000, 110000, 113000, 120000, 105000, 106000, 107500, 108000, 113750, 120000, 70000, 71000, 82000, 82000, 82500, 83000, 84000, 85000, 85000, 91500, 94000, 103000, 105000, 105000};
    std::vector<float> lot_size = {5850, 4000, 3060, 6650, 6360, 4160, 3880, 4160, 4800, 5500, 7200, 3000, 1700, 2880, 3600, 3185, 3300, 5200, 3450, 3986, 4785, 4510, 4000, 3934, 4960, 3000, 3800, 4960, 3000, 4500, 3500, 3500, 4000, 4500, 6360, 4500, 4032, 5170, 5400, 3150, 3745, 4520, 4640, 8580, 2000, 2160, 3040, 3090, 4960, 3350, 5300, 4100, 9166, 4040, 3630, 3620, 2400, 7260, 4400, 2400, 4120, 4750, 4280, 4820, 5500, 5500, 5040, 6000, 2500, 4095, 4095, 3150, 1836, 2475, 3210, 3180, 1650, 3180, 3180, 6360, 4240, 3240, 3650, 3240, 3780, 6480, 5850, 3150, 3000, 3090, 6060, 5900, 7420, 8500, 8050, 6800, 8250, 8250, 3500, 2835, 4500, 3300, 4320, 3500, 4992, 4600, 3720, 3680, 3000, 3750, 5076, 4500, 5000, 4260, 6540, 3700, 3760, 4000, 4300, 6840, 4400, 10500, 4400, 4840, 4120, 4260, 5960, 8800, 4560, 4600, 4840, 3850, 4900, 3850, 3760, 6000, 4370, 7700, 2990, 3750, 3000, 2650, 4500, 4500, 4500, 4500, 2175, 4500, 4800, 4600, 3450, 3000, 3600, 3600, 3750, 2610, 2953, 2747, 1905, 3968, 3162, 6000, 2910, 2135, 3120, 4075, 3410, 2800, 2684, 3100, 3630, 1950, 2430, 4320, 3036, 3630, 5400, 3420, 3180, 3660, 4410, 3990, 4340, 3510, 3420, 3420, 5495, 3480, 7424, 3460, 3630, 3630, 3480, 3460, 3180, 3635, 3960, 4350, 3930, 3570, 3600, 2520, 3480, 3180, 3290, 4000, 2325, 4350, 3540, 3960, 2640, 2700, 2700, 3180, 3500, 3630, 6000, 3150, 3792, 3510, 3120, 3000, 4200, 2817, 3240, 2800, 3816, 3185, 6321, 3650, 4700, 6615, 3850, 3970, 3000, 4352, 3630, 3600, 3000, 3000, 2787, 3000, 4770, 3649, 3970, 2910, 3480, 6615, 3500, 3450, 3450, 3520, 6930, 4600, 4360, 3450, 4410, 4600, 3640, 6000, 5400, 3640, 3640, 4040, 3640, 3640, 5640, 3600, 3600, 4632, 3640, 4900, 4510, 4100, 3640, 5680, 6300, 4000, 3960, 5960, 5830, 4500, 4100, 6750, 9000, 2550, 7152, 6450, 3360, 3264, 4000, 4000, 3069, 4040, 4040, 3185, 5900, 3120, 5450, 4040, 4080, 8080, 4040, 4080, 5800, 5885, 9667, 3420, 5800, 7600, 5400, 4995, 3000, 5500, 6450, 6210, 5000, 5000, 5828, 5200, 5500, 6350, 8250, 6000, 7700, 8880, 8880, 6480, 7000, 8875, 7155, 8960, 7350, 3850, 7000, 7770, 7440, 7500, 8100, 3900, 2970, 3000, 10500, 5500, 4500, 3850, 4130, 4046, 4079, 4000, 9860, 7000, 7980, 6800, 4300, 10269, 6100, 6420, 12090, 6600, 6600, 8580, 9960, 10700, 15600, 13200, 9000, 7950, 16200, 6100, 6360, 6420, 6360, 6540, 6420, 6550, 5750, 7420, 7160, 4000, 9000, 6550, 13200, 7085, 6600, 6900, 11460, 7020, 6540, 8000, 9620, 10500, 5020, 7440, 6600, 7200, 6710, 6660, 7000, 7231, 7410, 7800, 6825, 6360, 6600, 6900, 6600, 6420, 6600, 6600, 9000, 6500, 6360, 5300, 2850, 6400, 11175, 6750, 7500, 6000, 10240, 5136, 3400, 2880, 3840, 2870, 5320, 3512, 3480, 3600, 3520, 5320, 6040, 11410, 8400, 5300, 7800, 3520, 5360, 6862, 3520, 4050, 3520, 4400, 5720, 11440, 7482, 5500, 4320, 5400, 4320, 4815, 6100, 7980, 6050, 3800, 5400, 6000, 2398, 2145, 2145, 2145, 2610, 1950, 2145, 2275, 2856, 2015, 2176, 2145, 2145, 2787, 9500, 4990, 6670, 6254, 10360, 5500, 5450, 5500, 6000, 5700, 6600, 4000, 4880, 4880, 8050, 8100, 5880, 5880, 12944, 6020, 4050, 8400, 5600, 5985, 4500, 4920, 8250, 8400, 6440, 8100, 6720, 5948, 8150, 4800, 9800, 8520, 8372, 4040, 4646, 4775, 4950, 5010, 6060, 3584, 6000, 6000, 6240, 6000, 7680, 6000, 6000, 6000, 6000, 7475, 5150, 6325, 6000, 6000, 6000, 7000, 12900, 7686, 5000, 5800, 6000, 4800, 6500, 7320, 6525, 4800, 6000, 6000, 6000, 6000};
    std::vector<float> bedrooms = {3, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, 3, 4, 1, 2, 3, 4, 3, 2, 2, 2, 2, 2, 3, 3, 2, 4, 2, 2, 2, 2, 2, 3, 4, 2, 3, 3, 4, 5, 2, 3, 2, 3, 4, 3, 5, 4, 2, 3, 3, 2, 3, 3, 3, 3, 2, 2, 2, 3, 4, 3, 3, 2, 2, 3, 2, 3, 2, 3, 3, 3, 3, 4, 2, 2, 3, 2, 3, 3, 2, 3, 2, 3, 2, 2, 3, 4, 4, 3, 3, 2, 3, 3, 2, 2, 3, 3, 3, 4, 3, 2, 2, 3, 3, 2, 3, 2, 3, 4, 4, 4, 3, 3, 3, 5, 2, 4, 2, 3, 2, 4, 3, 3, 3, 3, 2, 3, 3, 3, 3, 4, 3, 2, 2, 3, 3, 3, 4, 2, 3, 2, 3, 3, 5, 4, 3, 3, 2, 3, 3, 4, 3, 4, 5, 3, 3, 4, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 4, 3, 4, 2, 3, 3, 3, 5, 2, 3, 4, 3, 4, 3, 2, 3, 3, 2, 2, 3, 3, 2, 3, 3, 5, 3, 4, 2, 4, 3, 2, 2, 3, 2, 2, 3, 3, 4, 2, 4, 3, 4, 3, 3, 4, 3, 4, 4, 3, 2, 2, 3, 3, 4, 4, 3, 1, 2, 4, 4, 6, 2, 4, 4, 2, 3, 2, 3, 2, 2, 3, 2, 3, 3, 2, 4, 3, 4, 3, 4, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 4, 3, 2, 4, 2, 3, 3, 3, 3, 3, 3, 2, 4, 3, 2, 3, 3, 3, 4, 2, 2, 3, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 3, 3, 2, 4, 4, 2, 4, 3, 4, 3, 3, 3, 4, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 4, 2, 2, 3, 2, 3, 3, 4, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 6, 3, 3, 3, 4, 3, 4, 4, 3, 3, 3, 2, 4, 5, 5, 3, 3, 3, 4, 4, 3, 4, 3, 4, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 4, 3, 2, 3, 3, 3, 3, 2, 2, 2, 2, 3, 2, 3, 3, 2, 3, 4, 3, 3, 3, 3, 3, 2, 3, 4, 2, 4, 3, 4, 3, 2, 3, 2, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 4, 3, 3, 3, 4, 3, 4, 2, 3, 4, 3, 4, 3, 2, 2, 3, 4, 2, 2, 3, 2, 3, 3, 2, 2, 2, 3, 3, 3, 3, 4, 2, 4, 3, 3, 3, 2, 4, 3, 3, 3, 3, 4, 4, 3, 2, 2, 3, 4, 4, 3, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3};
    std::vector<float> bathrooms = {1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 2, 3, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 4, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 2, 3, 2, 1, 1, 1, 2, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1};
    std::vector<float> stories = {2, 1, 1, 2, 1, 1, 2, 3, 1, 4, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 4, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 3, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 4, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 4, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 3, 2, 3, 2, 2, 3, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 3, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 4, 4, 3, 4, 3, 3, 3, 3, 1, 1, 2, 1, 4, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 2, 2, 3, 2, 1, 2, 4, 1, 2, 2, 3, 2, 1, 2, 1, 1, 2, 1, 3, 3, 2, 4, 2, 4, 2, 2, 1, 1, 4, 2, 2, 1, 1, 1, 3, 2, 2, 2, 4, 3, 1, 2, 4, 2, 2, 1, 2, 1, 3, 1, 1, 1, 1, 1, 4, 4, 1, 2, 2, 2, 1, 2, 1, 1, 1, 3, 1, 1, 1, 3, 1, 3, 1, 3, 4, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 3, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 4, 1, 2, 2, 3, 2, 2, 3, 3, 3, 2, 2, 1, 3, 1, 2, 2, 3, 1, 1, 1, 1, 3, 3, 1, 4, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 4, 1, 4, 1, 2, 1, 1, 2, 1, 3, 2, 2, 2, 2, 2, 1, 1, 3, 4, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 1, 1, 3, 4, 4, 3, 3, 2, 4, 4, 4, 4, 2, 2};

    std::vector<std::vector<float>> d_vect;
    d_vect.push_back(lot_size);
    d_vect.push_back(bedrooms);
    cf_regression::fit_mlreg(d_vect, prices, 2);
    cf_regression::predict_mlreg(500);
}

void presentPart3() {
    std::vector < float_type > d1Xs;
    std::vector < float_type > d1Ys;
    std::vector < float_type > d2Xs;
    std::vector < float_type > d2Ys;
    /** Reading both data sets */
    readXAndYValues < float_type > ( R"(..\datasets\part_3\3_dataset_1.csv)" , d1Xs , d1Ys );
    readXAndYValues < float_type > ( R"(..\datasets\part_3\3_dataset_2.csv)" , d2Xs , d2Ys );
    /** Get test X values based on the original x values. Will divide the range into 500 numbers. */
    std::vector < float_type > testD1Xs = getTestXs ( d1Xs );
    std::vector < float_type > testD2Xs = getTestXs ( d2Xs );
    /** Doing Newton interpolation first */
    auto d1NewtonInterpolation = Solution::Part3::NewtonInterpolator < float_type > ();
    /** Fitting the data */
    d1NewtonInterpolation.fit ( d1Xs , d1Ys );
    /** Interpolating the same X values to compare the result */
    auto d1NewtPredYs = d1NewtonInterpolation.interpolate ( d1Xs );
    auto d1NewtPredTestYs = d1NewtonInterpolation.interpolate ( testD1Xs );
    /** Printing the prediction and the coefficients to file */
    printPredictionResult ( d1Xs , d1Ys , d1NewtPredYs , R"(..\datasets\part_3\Newt_Pred_Points_1.csv)" );
    printPredictionResult ( testD1Xs , d1NewtPredTestYs , d1NewtPredTestYs , R"(..\datasets\part_3\Newt_Test_Pred_Points_1.csv)" );
    printCoefficients ( d1NewtonInterpolation.getCoefficients () , R"(..\datasets\part_3\Newt_Coeff_1.csv)" );
    /** Repeating Newton for the second data set */
    auto d2NewtonInterpolation = Solution::Part3::NewtonInterpolator < float_type > ();
    d2NewtonInterpolation.fit ( d2Xs , d2Ys );
    auto d2NewtPredYs = d2NewtonInterpolation.interpolate ( d2Xs );
    auto d2NewtPredTestYs = d2NewtonInterpolation.interpolate ( testD2Xs );
    printPredictionResult ( d2Xs , d2Ys , d2NewtPredYs , R"(..\datasets\part_3\Newt_Pred_Points_2.csv)" );
    printPredictionResult ( testD2Xs , d2NewtPredTestYs , d2NewtPredTestYs , R"(..\datasets\part_3\Newt_Test_Pred_Points_2.csv)" );
    printCoefficients ( d2NewtonInterpolation.getCoefficients () , R"(..\datasets\part_3\Newt_Coeff_2.csv)" );
    /** Now using the cubic spline */
    auto d1CubicSplineInterpolation = Solution::Part3::CubicSplineInterpolator < float_type > ();
    /** Fitting the data */
    d1CubicSplineInterpolation.fit ( d1Xs , d1Ys );
    /** Interpolating the same X values to compare the result */
    auto d1CuPredYs = d1CubicSplineInterpolation.interpolate ( d1Xs );
    auto d1CuPredTestYs = d1CubicSplineInterpolation.interpolate ( testD1Xs );
    /** Printing the prediction and the coefficients to file */
    printPredictionResult ( d1Xs , d1Ys , d1CuPredYs , R"(..\datasets\part_3\Cube_Pred_Points_1.csv)" );
    printPredictionResult ( testD1Xs , d1CuPredTestYs , d1CuPredTestYs , R"(..\datasets\part_3\Cube_Test_Pred_Points_1.csv)" );
    printCoefficients ( d1CubicSplineInterpolation.getCoefficients () , R"(..\datasets\part_3\Cube_Coeff_1.csv)" );
    /** Repeating Cubic for the second data set */
    auto d2CubicSplineInterpolation = Solution::Part3::CubicSplineInterpolator < float_type > ();
    d2CubicSplineInterpolation.fit ( d2Xs , d2Ys );
    auto d2CuPredYs = d2CubicSplineInterpolation.interpolate ( d2Xs );
    auto d2CuPredTestYs = d2CubicSplineInterpolation.interpolate ( testD2Xs );
    printPredictionResult ( d2Xs , d2Ys , d2CuPredYs , R"(..\datasets\part_3\Cube_Pred_Points_2.csv)" );
    printPredictionResult ( testD2Xs , d2CuPredTestYs , d2CuPredTestYs , R"(..\datasets\part_3\Cube_Test_Pred_Points_2.csv)" );
    printCoefficients ( d2CubicSplineInterpolation.getCoefficients () , R"(..\datasets\part_3\Cube_Coeff_2.csv)" );
    std::system ( R"(python.exe "..\Plot.py")" );
}


